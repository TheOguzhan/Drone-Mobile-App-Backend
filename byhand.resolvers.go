package main

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/graph"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/utils"
	"github.com/google/uuid"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input ent.CreateUserInput) (*ent.User, error) {
	fc, err := utils.FiberContextFromContext(ctx)
	if err != nil {
		return nil, err
	}

	gen_user, err := r.client.User.Create().SetInput(input).Save(ctx)

	if err != nil {
		return nil, err
	}

	token, err := utils.CreateJWTToken(gen_user.ID.String())

	if err != nil {
		return nil, err
	}

	fc.Response().Header.Add("Authorization", fmt.Sprintf("Bearer %s", token.String()))
	return gen_user, nil
}

// CreateAddress is the resolver for the createAddress field.
func (r *mutationResolver) CreateAddress(ctx context.Context, input ent.CreateAddressInput) (*ent.Address, error) {
	user_id, err := utils.AuthedUserFromContext(ctx)

	if err != nil {
		return nil, err
	}

	c_user, err := r.client.User.Get(ctx, uuid.MustParse(user_id))

	if err != nil {
		return nil, err
	}

	address, err := r.client.Address.Create().SetInput(input).SetAddressMaster(c_user).Save(ctx)

	if err != nil {
		return nil, err
	}

	return address, nil
}

// RegisterAProduct is the resolver for the registerAProduct field.
func (r *mutationResolver) RegisterAProduct(ctx context.Context, input ent.CreateProductInput) (*ent.Product, error) {
	panic(fmt.Errorf("not implemented: RegisterAProduct - registerAProduct"))
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
