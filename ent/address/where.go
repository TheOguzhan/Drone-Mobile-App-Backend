// Code generated by ent, DO NOT EDIT.

package address

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldName, v))
}

// AddressLine applies equality check predicate on the "address_line" field. It's identical to AddressLineEQ.
func AddressLine(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldAddressLine, v))
}

// Latitude applies equality check predicate on the "latitude" field. It's identical to LatitudeEQ.
func Latitude(v float64) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldLatitude, v))
}

// Longtitude applies equality check predicate on the "longtitude" field. It's identical to LongtitudeEQ.
func Longtitude(v float64) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldLongtitude, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldName, v))
}

// AddressLineEQ applies the EQ predicate on the "address_line" field.
func AddressLineEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldAddressLine, v))
}

// AddressLineNEQ applies the NEQ predicate on the "address_line" field.
func AddressLineNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldAddressLine, v))
}

// AddressLineIn applies the In predicate on the "address_line" field.
func AddressLineIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldAddressLine, vs...))
}

// AddressLineNotIn applies the NotIn predicate on the "address_line" field.
func AddressLineNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldAddressLine, vs...))
}

// AddressLineGT applies the GT predicate on the "address_line" field.
func AddressLineGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldAddressLine, v))
}

// AddressLineGTE applies the GTE predicate on the "address_line" field.
func AddressLineGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldAddressLine, v))
}

// AddressLineLT applies the LT predicate on the "address_line" field.
func AddressLineLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldAddressLine, v))
}

// AddressLineLTE applies the LTE predicate on the "address_line" field.
func AddressLineLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldAddressLine, v))
}

// AddressLineContains applies the Contains predicate on the "address_line" field.
func AddressLineContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldAddressLine, v))
}

// AddressLineHasPrefix applies the HasPrefix predicate on the "address_line" field.
func AddressLineHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldAddressLine, v))
}

// AddressLineHasSuffix applies the HasSuffix predicate on the "address_line" field.
func AddressLineHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldAddressLine, v))
}

// AddressLineEqualFold applies the EqualFold predicate on the "address_line" field.
func AddressLineEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldAddressLine, v))
}

// AddressLineContainsFold applies the ContainsFold predicate on the "address_line" field.
func AddressLineContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldAddressLine, v))
}

// LatitudeEQ applies the EQ predicate on the "latitude" field.
func LatitudeEQ(v float64) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldLatitude, v))
}

// LatitudeNEQ applies the NEQ predicate on the "latitude" field.
func LatitudeNEQ(v float64) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldLatitude, v))
}

// LatitudeIn applies the In predicate on the "latitude" field.
func LatitudeIn(vs ...float64) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldLatitude, vs...))
}

// LatitudeNotIn applies the NotIn predicate on the "latitude" field.
func LatitudeNotIn(vs ...float64) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldLatitude, vs...))
}

// LatitudeGT applies the GT predicate on the "latitude" field.
func LatitudeGT(v float64) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldLatitude, v))
}

// LatitudeGTE applies the GTE predicate on the "latitude" field.
func LatitudeGTE(v float64) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldLatitude, v))
}

// LatitudeLT applies the LT predicate on the "latitude" field.
func LatitudeLT(v float64) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldLatitude, v))
}

// LatitudeLTE applies the LTE predicate on the "latitude" field.
func LatitudeLTE(v float64) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldLatitude, v))
}

// LongtitudeEQ applies the EQ predicate on the "longtitude" field.
func LongtitudeEQ(v float64) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldLongtitude, v))
}

// LongtitudeNEQ applies the NEQ predicate on the "longtitude" field.
func LongtitudeNEQ(v float64) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldLongtitude, v))
}

// LongtitudeIn applies the In predicate on the "longtitude" field.
func LongtitudeIn(vs ...float64) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldLongtitude, vs...))
}

// LongtitudeNotIn applies the NotIn predicate on the "longtitude" field.
func LongtitudeNotIn(vs ...float64) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldLongtitude, vs...))
}

// LongtitudeGT applies the GT predicate on the "longtitude" field.
func LongtitudeGT(v float64) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldLongtitude, v))
}

// LongtitudeGTE applies the GTE predicate on the "longtitude" field.
func LongtitudeGTE(v float64) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldLongtitude, v))
}

// LongtitudeLT applies the LT predicate on the "longtitude" field.
func LongtitudeLT(v float64) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldLongtitude, v))
}

// LongtitudeLTE applies the LTE predicate on the "longtitude" field.
func LongtitudeLTE(v float64) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldLongtitude, v))
}

// HasAddressMaster applies the HasEdge predicate on the "address_master" edge.
func HasAddressMaster() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AddressMasterTable, AddressMasterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAddressMasterWith applies the HasEdge predicate on the "address_master" edge with a given conditions (other predicates).
func HasAddressMasterWith(preds ...predicate.User) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AddressMasterInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AddressMasterTable, AddressMasterColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Address) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Address) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Address) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		p(s.Not())
	})
}
