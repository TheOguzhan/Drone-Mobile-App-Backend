// Code generated by ent, DO NOT EDIT.

package address

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the address type in the database.
	Label = "address"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAddressLine holds the string denoting the address_line field in the database.
	FieldAddressLine = "address_line"
	// FieldLatitude holds the string denoting the latitude field in the database.
	FieldLatitude = "latitude"
	// FieldLongtitude holds the string denoting the longtitude field in the database.
	FieldLongtitude = "longtitude"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeAddressOwner holds the string denoting the address_owner edge name in mutations.
	EdgeAddressOwner = "address_owner"
	// EdgeAddressOrder holds the string denoting the address_order edge name in mutations.
	EdgeAddressOrder = "address_order"
	// Table holds the table name of the address in the database.
	Table = "addresses"
	// AddressOwnerTable is the table that holds the address_owner relation/edge.
	AddressOwnerTable = "addresses"
	// AddressOwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AddressOwnerInverseTable = "users"
	// AddressOwnerColumn is the table column denoting the address_owner relation/edge.
	AddressOwnerColumn = "user_user_addresses"
	// AddressOrderTable is the table that holds the address_order relation/edge.
	AddressOrderTable = "orders"
	// AddressOrderInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	AddressOrderInverseTable = "orders"
	// AddressOrderColumn is the table column denoting the address_order relation/edge.
	AddressOrderColumn = "address_address_order"
)

// Columns holds all SQL columns for address fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldAddressLine,
	FieldLatitude,
	FieldLongtitude,
	FieldDescription,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "addresses"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_user_addresses",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
