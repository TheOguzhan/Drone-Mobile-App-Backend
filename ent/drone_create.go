// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/drone"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/order"
	"github.com/google/uuid"
)

// DroneCreate is the builder for creating a Drone entity.
type DroneCreate struct {
	config
	mutation *DroneMutation
	hooks    []Hook
}

// SetLatitude sets the "latitude" field.
func (dc *DroneCreate) SetLatitude(f float64) *DroneCreate {
	dc.mutation.SetLatitude(f)
	return dc
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (dc *DroneCreate) SetNillableLatitude(f *float64) *DroneCreate {
	if f != nil {
		dc.SetLatitude(*f)
	}
	return dc
}

// SetLongtitude sets the "longtitude" field.
func (dc *DroneCreate) SetLongtitude(f float64) *DroneCreate {
	dc.mutation.SetLongtitude(f)
	return dc
}

// SetNillableLongtitude sets the "longtitude" field if the given value is not nil.
func (dc *DroneCreate) SetNillableLongtitude(f *float64) *DroneCreate {
	if f != nil {
		dc.SetLongtitude(*f)
	}
	return dc
}

// SetInWarehouse sets the "in_warehouse" field.
func (dc *DroneCreate) SetInWarehouse(b bool) *DroneCreate {
	dc.mutation.SetInWarehouse(b)
	return dc
}

// SetNillableInWarehouse sets the "in_warehouse" field if the given value is not nil.
func (dc *DroneCreate) SetNillableInWarehouse(b *bool) *DroneCreate {
	if b != nil {
		dc.SetInWarehouse(*b)
	}
	return dc
}

// SetPlateNumber sets the "plate_number" field.
func (dc *DroneCreate) SetPlateNumber(s string) *DroneCreate {
	dc.mutation.SetPlateNumber(s)
	return dc
}

// SetID sets the "id" field.
func (dc *DroneCreate) SetID(u uuid.UUID) *DroneCreate {
	dc.mutation.SetID(u)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DroneCreate) SetNillableID(u *uuid.UUID) *DroneCreate {
	if u != nil {
		dc.SetID(*u)
	}
	return dc
}

// SetCurrentOrderID sets the "current_order" edge to the Order entity by ID.
func (dc *DroneCreate) SetCurrentOrderID(id uuid.UUID) *DroneCreate {
	dc.mutation.SetCurrentOrderID(id)
	return dc
}

// SetNillableCurrentOrderID sets the "current_order" edge to the Order entity by ID if the given value is not nil.
func (dc *DroneCreate) SetNillableCurrentOrderID(id *uuid.UUID) *DroneCreate {
	if id != nil {
		dc = dc.SetCurrentOrderID(*id)
	}
	return dc
}

// SetCurrentOrder sets the "current_order" edge to the Order entity.
func (dc *DroneCreate) SetCurrentOrder(o *Order) *DroneCreate {
	return dc.SetCurrentOrderID(o.ID)
}

// Mutation returns the DroneMutation object of the builder.
func (dc *DroneCreate) Mutation() *DroneMutation {
	return dc.mutation
}

// Save creates the Drone in the database.
func (dc *DroneCreate) Save(ctx context.Context) (*Drone, error) {
	dc.defaults()
	return withHooks[*Drone, DroneMutation](ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DroneCreate) SaveX(ctx context.Context) *Drone {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DroneCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DroneCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DroneCreate) defaults() {
	if _, ok := dc.mutation.InWarehouse(); !ok {
		v := drone.DefaultInWarehouse
		dc.mutation.SetInWarehouse(v)
	}
	if _, ok := dc.mutation.ID(); !ok {
		v := drone.DefaultID()
		dc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DroneCreate) check() error {
	if _, ok := dc.mutation.PlateNumber(); !ok {
		return &ValidationError{Name: "plate_number", err: errors.New(`ent: missing required field "Drone.plate_number"`)}
	}
	return nil
}

func (dc *DroneCreate) sqlSave(ctx context.Context) (*Drone, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DroneCreate) createSpec() (*Drone, *sqlgraph.CreateSpec) {
	var (
		_node = &Drone{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(drone.Table, sqlgraph.NewFieldSpec(drone.FieldID, field.TypeUUID))
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dc.mutation.Latitude(); ok {
		_spec.SetField(drone.FieldLatitude, field.TypeFloat64, value)
		_node.Latitude = &value
	}
	if value, ok := dc.mutation.Longtitude(); ok {
		_spec.SetField(drone.FieldLongtitude, field.TypeFloat64, value)
		_node.Longtitude = &value
	}
	if value, ok := dc.mutation.InWarehouse(); ok {
		_spec.SetField(drone.FieldInWarehouse, field.TypeBool, value)
		_node.InWarehouse = value
	}
	if value, ok := dc.mutation.PlateNumber(); ok {
		_spec.SetField(drone.FieldPlateNumber, field.TypeString, value)
		_node.PlateNumber = value
	}
	if nodes := dc.mutation.CurrentOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   drone.CurrentOrderTable,
			Columns: []string{drone.CurrentOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DroneCreateBulk is the builder for creating many Drone entities in bulk.
type DroneCreateBulk struct {
	config
	builders []*DroneCreate
}

// Save creates the Drone entities in the database.
func (dcb *DroneCreateBulk) Save(ctx context.Context) ([]*Drone, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Drone, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DroneMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DroneCreateBulk) SaveX(ctx context.Context) []*Drone {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DroneCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DroneCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
