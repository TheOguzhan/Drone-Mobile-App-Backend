// Code generated by ent, DO NOT EDIT.

package drone

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Drone {
	return predicate.Drone(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Drone {
	return predicate.Drone(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Drone {
	return predicate.Drone(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Drone {
	return predicate.Drone(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Drone {
	return predicate.Drone(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Drone {
	return predicate.Drone(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Drone {
	return predicate.Drone(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Drone {
	return predicate.Drone(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Drone {
	return predicate.Drone(sql.FieldLTE(FieldID, id))
}

// Latitude applies equality check predicate on the "latitude" field. It's identical to LatitudeEQ.
func Latitude(v float64) predicate.Drone {
	return predicate.Drone(sql.FieldEQ(FieldLatitude, v))
}

// Longtitude applies equality check predicate on the "longtitude" field. It's identical to LongtitudeEQ.
func Longtitude(v float64) predicate.Drone {
	return predicate.Drone(sql.FieldEQ(FieldLongtitude, v))
}

// InWarehouse applies equality check predicate on the "in_warehouse" field. It's identical to InWarehouseEQ.
func InWarehouse(v bool) predicate.Drone {
	return predicate.Drone(sql.FieldEQ(FieldInWarehouse, v))
}

// PlateNumber applies equality check predicate on the "plate_number" field. It's identical to PlateNumberEQ.
func PlateNumber(v string) predicate.Drone {
	return predicate.Drone(sql.FieldEQ(FieldPlateNumber, v))
}

// LatitudeEQ applies the EQ predicate on the "latitude" field.
func LatitudeEQ(v float64) predicate.Drone {
	return predicate.Drone(sql.FieldEQ(FieldLatitude, v))
}

// LatitudeNEQ applies the NEQ predicate on the "latitude" field.
func LatitudeNEQ(v float64) predicate.Drone {
	return predicate.Drone(sql.FieldNEQ(FieldLatitude, v))
}

// LatitudeIn applies the In predicate on the "latitude" field.
func LatitudeIn(vs ...float64) predicate.Drone {
	return predicate.Drone(sql.FieldIn(FieldLatitude, vs...))
}

// LatitudeNotIn applies the NotIn predicate on the "latitude" field.
func LatitudeNotIn(vs ...float64) predicate.Drone {
	return predicate.Drone(sql.FieldNotIn(FieldLatitude, vs...))
}

// LatitudeGT applies the GT predicate on the "latitude" field.
func LatitudeGT(v float64) predicate.Drone {
	return predicate.Drone(sql.FieldGT(FieldLatitude, v))
}

// LatitudeGTE applies the GTE predicate on the "latitude" field.
func LatitudeGTE(v float64) predicate.Drone {
	return predicate.Drone(sql.FieldGTE(FieldLatitude, v))
}

// LatitudeLT applies the LT predicate on the "latitude" field.
func LatitudeLT(v float64) predicate.Drone {
	return predicate.Drone(sql.FieldLT(FieldLatitude, v))
}

// LatitudeLTE applies the LTE predicate on the "latitude" field.
func LatitudeLTE(v float64) predicate.Drone {
	return predicate.Drone(sql.FieldLTE(FieldLatitude, v))
}

// LatitudeIsNil applies the IsNil predicate on the "latitude" field.
func LatitudeIsNil() predicate.Drone {
	return predicate.Drone(sql.FieldIsNull(FieldLatitude))
}

// LatitudeNotNil applies the NotNil predicate on the "latitude" field.
func LatitudeNotNil() predicate.Drone {
	return predicate.Drone(sql.FieldNotNull(FieldLatitude))
}

// LongtitudeEQ applies the EQ predicate on the "longtitude" field.
func LongtitudeEQ(v float64) predicate.Drone {
	return predicate.Drone(sql.FieldEQ(FieldLongtitude, v))
}

// LongtitudeNEQ applies the NEQ predicate on the "longtitude" field.
func LongtitudeNEQ(v float64) predicate.Drone {
	return predicate.Drone(sql.FieldNEQ(FieldLongtitude, v))
}

// LongtitudeIn applies the In predicate on the "longtitude" field.
func LongtitudeIn(vs ...float64) predicate.Drone {
	return predicate.Drone(sql.FieldIn(FieldLongtitude, vs...))
}

// LongtitudeNotIn applies the NotIn predicate on the "longtitude" field.
func LongtitudeNotIn(vs ...float64) predicate.Drone {
	return predicate.Drone(sql.FieldNotIn(FieldLongtitude, vs...))
}

// LongtitudeGT applies the GT predicate on the "longtitude" field.
func LongtitudeGT(v float64) predicate.Drone {
	return predicate.Drone(sql.FieldGT(FieldLongtitude, v))
}

// LongtitudeGTE applies the GTE predicate on the "longtitude" field.
func LongtitudeGTE(v float64) predicate.Drone {
	return predicate.Drone(sql.FieldGTE(FieldLongtitude, v))
}

// LongtitudeLT applies the LT predicate on the "longtitude" field.
func LongtitudeLT(v float64) predicate.Drone {
	return predicate.Drone(sql.FieldLT(FieldLongtitude, v))
}

// LongtitudeLTE applies the LTE predicate on the "longtitude" field.
func LongtitudeLTE(v float64) predicate.Drone {
	return predicate.Drone(sql.FieldLTE(FieldLongtitude, v))
}

// LongtitudeIsNil applies the IsNil predicate on the "longtitude" field.
func LongtitudeIsNil() predicate.Drone {
	return predicate.Drone(sql.FieldIsNull(FieldLongtitude))
}

// LongtitudeNotNil applies the NotNil predicate on the "longtitude" field.
func LongtitudeNotNil() predicate.Drone {
	return predicate.Drone(sql.FieldNotNull(FieldLongtitude))
}

// InWarehouseEQ applies the EQ predicate on the "in_warehouse" field.
func InWarehouseEQ(v bool) predicate.Drone {
	return predicate.Drone(sql.FieldEQ(FieldInWarehouse, v))
}

// InWarehouseNEQ applies the NEQ predicate on the "in_warehouse" field.
func InWarehouseNEQ(v bool) predicate.Drone {
	return predicate.Drone(sql.FieldNEQ(FieldInWarehouse, v))
}

// InWarehouseIsNil applies the IsNil predicate on the "in_warehouse" field.
func InWarehouseIsNil() predicate.Drone {
	return predicate.Drone(sql.FieldIsNull(FieldInWarehouse))
}

// InWarehouseNotNil applies the NotNil predicate on the "in_warehouse" field.
func InWarehouseNotNil() predicate.Drone {
	return predicate.Drone(sql.FieldNotNull(FieldInWarehouse))
}

// PlateNumberEQ applies the EQ predicate on the "plate_number" field.
func PlateNumberEQ(v string) predicate.Drone {
	return predicate.Drone(sql.FieldEQ(FieldPlateNumber, v))
}

// PlateNumberNEQ applies the NEQ predicate on the "plate_number" field.
func PlateNumberNEQ(v string) predicate.Drone {
	return predicate.Drone(sql.FieldNEQ(FieldPlateNumber, v))
}

// PlateNumberIn applies the In predicate on the "plate_number" field.
func PlateNumberIn(vs ...string) predicate.Drone {
	return predicate.Drone(sql.FieldIn(FieldPlateNumber, vs...))
}

// PlateNumberNotIn applies the NotIn predicate on the "plate_number" field.
func PlateNumberNotIn(vs ...string) predicate.Drone {
	return predicate.Drone(sql.FieldNotIn(FieldPlateNumber, vs...))
}

// PlateNumberGT applies the GT predicate on the "plate_number" field.
func PlateNumberGT(v string) predicate.Drone {
	return predicate.Drone(sql.FieldGT(FieldPlateNumber, v))
}

// PlateNumberGTE applies the GTE predicate on the "plate_number" field.
func PlateNumberGTE(v string) predicate.Drone {
	return predicate.Drone(sql.FieldGTE(FieldPlateNumber, v))
}

// PlateNumberLT applies the LT predicate on the "plate_number" field.
func PlateNumberLT(v string) predicate.Drone {
	return predicate.Drone(sql.FieldLT(FieldPlateNumber, v))
}

// PlateNumberLTE applies the LTE predicate on the "plate_number" field.
func PlateNumberLTE(v string) predicate.Drone {
	return predicate.Drone(sql.FieldLTE(FieldPlateNumber, v))
}

// PlateNumberContains applies the Contains predicate on the "plate_number" field.
func PlateNumberContains(v string) predicate.Drone {
	return predicate.Drone(sql.FieldContains(FieldPlateNumber, v))
}

// PlateNumberHasPrefix applies the HasPrefix predicate on the "plate_number" field.
func PlateNumberHasPrefix(v string) predicate.Drone {
	return predicate.Drone(sql.FieldHasPrefix(FieldPlateNumber, v))
}

// PlateNumberHasSuffix applies the HasSuffix predicate on the "plate_number" field.
func PlateNumberHasSuffix(v string) predicate.Drone {
	return predicate.Drone(sql.FieldHasSuffix(FieldPlateNumber, v))
}

// PlateNumberEqualFold applies the EqualFold predicate on the "plate_number" field.
func PlateNumberEqualFold(v string) predicate.Drone {
	return predicate.Drone(sql.FieldEqualFold(FieldPlateNumber, v))
}

// PlateNumberContainsFold applies the ContainsFold predicate on the "plate_number" field.
func PlateNumberContainsFold(v string) predicate.Drone {
	return predicate.Drone(sql.FieldContainsFold(FieldPlateNumber, v))
}

// HasCurrentOrder applies the HasEdge predicate on the "current_order" edge.
func HasCurrentOrder() predicate.Drone {
	return predicate.Drone(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CurrentOrderTable, CurrentOrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCurrentOrderWith applies the HasEdge predicate on the "current_order" edge with a given conditions (other predicates).
func HasCurrentOrderWith(preds ...predicate.Order) predicate.Drone {
	return predicate.Drone(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CurrentOrderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CurrentOrderTable, CurrentOrderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Drone) predicate.Drone {
	return predicate.Drone(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Drone) predicate.Drone {
	return predicate.Drone(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Drone) predicate.Drone {
	return predicate.Drone(func(s *sql.Selector) {
		p(s.Not())
	})
}
