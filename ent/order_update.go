// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/address"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/drone"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/order"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/predicate"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/product"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/user"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/warehouse"
	"github.com/google/uuid"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetQrCode sets the "qr_code" field.
func (ou *OrderUpdate) SetQrCode(s string) *OrderUpdate {
	ou.mutation.SetQrCode(s)
	return ou
}

// SetNillableQrCode sets the "qr_code" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableQrCode(s *string) *OrderUpdate {
	if s != nil {
		ou.SetQrCode(*s)
	}
	return ou
}

// SetDateOfTheOrder sets the "date_of_the_order" field.
func (ou *OrderUpdate) SetDateOfTheOrder(t time.Time) *OrderUpdate {
	ou.mutation.SetDateOfTheOrder(t)
	return ou
}

// SetNillableDateOfTheOrder sets the "date_of_the_order" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDateOfTheOrder(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetDateOfTheOrder(*t)
	}
	return ou
}

// SetCompleted sets the "completed" field.
func (ou *OrderUpdate) SetCompleted(b bool) *OrderUpdate {
	ou.mutation.SetCompleted(b)
	return ou
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCompleted(b *bool) *OrderUpdate {
	if b != nil {
		ou.SetCompleted(*b)
	}
	return ou
}

// SetCarrierDroneID sets the "carrier_drone" edge to the Drone entity by ID.
func (ou *OrderUpdate) SetCarrierDroneID(id uuid.UUID) *OrderUpdate {
	ou.mutation.SetCarrierDroneID(id)
	return ou
}

// SetCarrierDrone sets the "carrier_drone" edge to the Drone entity.
func (ou *OrderUpdate) SetCarrierDrone(d *Drone) *OrderUpdate {
	return ou.SetCarrierDroneID(d.ID)
}

// SetUserOrderID sets the "user_order" edge to the User entity by ID.
func (ou *OrderUpdate) SetUserOrderID(id uuid.UUID) *OrderUpdate {
	ou.mutation.SetUserOrderID(id)
	return ou
}

// SetUserOrder sets the "user_order" edge to the User entity.
func (ou *OrderUpdate) SetUserOrder(u *User) *OrderUpdate {
	return ou.SetUserOrderID(u.ID)
}

// SetOrderWarehouseID sets the "order_warehouse" edge to the Warehouse entity by ID.
func (ou *OrderUpdate) SetOrderWarehouseID(id uuid.UUID) *OrderUpdate {
	ou.mutation.SetOrderWarehouseID(id)
	return ou
}

// SetOrderWarehouse sets the "order_warehouse" edge to the Warehouse entity.
func (ou *OrderUpdate) SetOrderWarehouse(w *Warehouse) *OrderUpdate {
	return ou.SetOrderWarehouseID(w.ID)
}

// SetOrderAddressID sets the "order_address" edge to the Address entity by ID.
func (ou *OrderUpdate) SetOrderAddressID(id uuid.UUID) *OrderUpdate {
	ou.mutation.SetOrderAddressID(id)
	return ou
}

// SetOrderAddress sets the "order_address" edge to the Address entity.
func (ou *OrderUpdate) SetOrderAddress(a *Address) *OrderUpdate {
	return ou.SetOrderAddressID(a.ID)
}

// SetOrderProductID sets the "order_product" edge to the Product entity by ID.
func (ou *OrderUpdate) SetOrderProductID(id uuid.UUID) *OrderUpdate {
	ou.mutation.SetOrderProductID(id)
	return ou
}

// SetOrderProduct sets the "order_product" edge to the Product entity.
func (ou *OrderUpdate) SetOrderProduct(p *Product) *OrderUpdate {
	return ou.SetOrderProductID(p.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearCarrierDrone clears the "carrier_drone" edge to the Drone entity.
func (ou *OrderUpdate) ClearCarrierDrone() *OrderUpdate {
	ou.mutation.ClearCarrierDrone()
	return ou
}

// ClearUserOrder clears the "user_order" edge to the User entity.
func (ou *OrderUpdate) ClearUserOrder() *OrderUpdate {
	ou.mutation.ClearUserOrder()
	return ou
}

// ClearOrderWarehouse clears the "order_warehouse" edge to the Warehouse entity.
func (ou *OrderUpdate) ClearOrderWarehouse() *OrderUpdate {
	ou.mutation.ClearOrderWarehouse()
	return ou
}

// ClearOrderAddress clears the "order_address" edge to the Address entity.
func (ou *OrderUpdate) ClearOrderAddress() *OrderUpdate {
	ou.mutation.ClearOrderAddress()
	return ou
}

// ClearOrderProduct clears the "order_product" edge to the Product entity.
func (ou *OrderUpdate) ClearOrderProduct() *OrderUpdate {
	ou.mutation.ClearOrderProduct()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, OrderMutation](ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrderUpdate) check() error {
	if _, ok := ou.mutation.CarrierDroneID(); ou.mutation.CarrierDroneCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.carrier_drone"`)
	}
	if _, ok := ou.mutation.UserOrderID(); ou.mutation.UserOrderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.user_order"`)
	}
	if _, ok := ou.mutation.OrderWarehouseID(); ou.mutation.OrderWarehouseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.order_warehouse"`)
	}
	if _, ok := ou.mutation.OrderAddressID(); ou.mutation.OrderAddressCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.order_address"`)
	}
	if _, ok := ou.mutation.OrderProductID(); ou.mutation.OrderProductCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.order_product"`)
	}
	return nil
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.QrCode(); ok {
		_spec.SetField(order.FieldQrCode, field.TypeString, value)
	}
	if value, ok := ou.mutation.DateOfTheOrder(); ok {
		_spec.SetField(order.FieldDateOfTheOrder, field.TypeTime, value)
	}
	if value, ok := ou.mutation.Completed(); ok {
		_spec.SetField(order.FieldCompleted, field.TypeBool, value)
	}
	if ou.mutation.CarrierDroneCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   order.CarrierDroneTable,
			Columns: []string{order.CarrierDroneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: drone.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.CarrierDroneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   order.CarrierDroneTable,
			Columns: []string{order.CarrierDroneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: drone.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.UserOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.UserOrderTable,
			Columns: []string{order.UserOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.UserOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.UserOrderTable,
			Columns: []string{order.UserOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OrderWarehouseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   order.OrderWarehouseTable,
			Columns: []string{order.OrderWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: warehouse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OrderWarehouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   order.OrderWarehouseTable,
			Columns: []string{order.OrderWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: warehouse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OrderAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   order.OrderAddressTable,
			Columns: []string{order.OrderAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: address.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OrderAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   order.OrderAddressTable,
			Columns: []string{order.OrderAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: address.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OrderProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.OrderProductTable,
			Columns: []string{order.OrderProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OrderProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.OrderProductTable,
			Columns: []string{order.OrderProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetQrCode sets the "qr_code" field.
func (ouo *OrderUpdateOne) SetQrCode(s string) *OrderUpdateOne {
	ouo.mutation.SetQrCode(s)
	return ouo
}

// SetNillableQrCode sets the "qr_code" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableQrCode(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetQrCode(*s)
	}
	return ouo
}

// SetDateOfTheOrder sets the "date_of_the_order" field.
func (ouo *OrderUpdateOne) SetDateOfTheOrder(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetDateOfTheOrder(t)
	return ouo
}

// SetNillableDateOfTheOrder sets the "date_of_the_order" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDateOfTheOrder(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetDateOfTheOrder(*t)
	}
	return ouo
}

// SetCompleted sets the "completed" field.
func (ouo *OrderUpdateOne) SetCompleted(b bool) *OrderUpdateOne {
	ouo.mutation.SetCompleted(b)
	return ouo
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCompleted(b *bool) *OrderUpdateOne {
	if b != nil {
		ouo.SetCompleted(*b)
	}
	return ouo
}

// SetCarrierDroneID sets the "carrier_drone" edge to the Drone entity by ID.
func (ouo *OrderUpdateOne) SetCarrierDroneID(id uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetCarrierDroneID(id)
	return ouo
}

// SetCarrierDrone sets the "carrier_drone" edge to the Drone entity.
func (ouo *OrderUpdateOne) SetCarrierDrone(d *Drone) *OrderUpdateOne {
	return ouo.SetCarrierDroneID(d.ID)
}

// SetUserOrderID sets the "user_order" edge to the User entity by ID.
func (ouo *OrderUpdateOne) SetUserOrderID(id uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetUserOrderID(id)
	return ouo
}

// SetUserOrder sets the "user_order" edge to the User entity.
func (ouo *OrderUpdateOne) SetUserOrder(u *User) *OrderUpdateOne {
	return ouo.SetUserOrderID(u.ID)
}

// SetOrderWarehouseID sets the "order_warehouse" edge to the Warehouse entity by ID.
func (ouo *OrderUpdateOne) SetOrderWarehouseID(id uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetOrderWarehouseID(id)
	return ouo
}

// SetOrderWarehouse sets the "order_warehouse" edge to the Warehouse entity.
func (ouo *OrderUpdateOne) SetOrderWarehouse(w *Warehouse) *OrderUpdateOne {
	return ouo.SetOrderWarehouseID(w.ID)
}

// SetOrderAddressID sets the "order_address" edge to the Address entity by ID.
func (ouo *OrderUpdateOne) SetOrderAddressID(id uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetOrderAddressID(id)
	return ouo
}

// SetOrderAddress sets the "order_address" edge to the Address entity.
func (ouo *OrderUpdateOne) SetOrderAddress(a *Address) *OrderUpdateOne {
	return ouo.SetOrderAddressID(a.ID)
}

// SetOrderProductID sets the "order_product" edge to the Product entity by ID.
func (ouo *OrderUpdateOne) SetOrderProductID(id uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetOrderProductID(id)
	return ouo
}

// SetOrderProduct sets the "order_product" edge to the Product entity.
func (ouo *OrderUpdateOne) SetOrderProduct(p *Product) *OrderUpdateOne {
	return ouo.SetOrderProductID(p.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearCarrierDrone clears the "carrier_drone" edge to the Drone entity.
func (ouo *OrderUpdateOne) ClearCarrierDrone() *OrderUpdateOne {
	ouo.mutation.ClearCarrierDrone()
	return ouo
}

// ClearUserOrder clears the "user_order" edge to the User entity.
func (ouo *OrderUpdateOne) ClearUserOrder() *OrderUpdateOne {
	ouo.mutation.ClearUserOrder()
	return ouo
}

// ClearOrderWarehouse clears the "order_warehouse" edge to the Warehouse entity.
func (ouo *OrderUpdateOne) ClearOrderWarehouse() *OrderUpdateOne {
	ouo.mutation.ClearOrderWarehouse()
	return ouo
}

// ClearOrderAddress clears the "order_address" edge to the Address entity.
func (ouo *OrderUpdateOne) ClearOrderAddress() *OrderUpdateOne {
	ouo.mutation.ClearOrderAddress()
	return ouo
}

// ClearOrderProduct clears the "order_product" edge to the Product entity.
func (ouo *OrderUpdateOne) ClearOrderProduct() *OrderUpdateOne {
	ouo.mutation.ClearOrderProduct()
	return ouo
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	return withHooks[*Order, OrderMutation](ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrderUpdateOne) check() error {
	if _, ok := ouo.mutation.CarrierDroneID(); ouo.mutation.CarrierDroneCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.carrier_drone"`)
	}
	if _, ok := ouo.mutation.UserOrderID(); ouo.mutation.UserOrderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.user_order"`)
	}
	if _, ok := ouo.mutation.OrderWarehouseID(); ouo.mutation.OrderWarehouseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.order_warehouse"`)
	}
	if _, ok := ouo.mutation.OrderAddressID(); ouo.mutation.OrderAddressCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.order_address"`)
	}
	if _, ok := ouo.mutation.OrderProductID(); ouo.mutation.OrderProductCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.order_product"`)
	}
	return nil
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.QrCode(); ok {
		_spec.SetField(order.FieldQrCode, field.TypeString, value)
	}
	if value, ok := ouo.mutation.DateOfTheOrder(); ok {
		_spec.SetField(order.FieldDateOfTheOrder, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.Completed(); ok {
		_spec.SetField(order.FieldCompleted, field.TypeBool, value)
	}
	if ouo.mutation.CarrierDroneCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   order.CarrierDroneTable,
			Columns: []string{order.CarrierDroneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: drone.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.CarrierDroneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   order.CarrierDroneTable,
			Columns: []string{order.CarrierDroneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: drone.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.UserOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.UserOrderTable,
			Columns: []string{order.UserOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.UserOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.UserOrderTable,
			Columns: []string{order.UserOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OrderWarehouseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   order.OrderWarehouseTable,
			Columns: []string{order.OrderWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: warehouse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OrderWarehouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   order.OrderWarehouseTable,
			Columns: []string{order.OrderWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: warehouse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OrderAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   order.OrderAddressTable,
			Columns: []string{order.OrderAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: address.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OrderAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   order.OrderAddressTable,
			Columns: []string{order.OrderAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: address.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OrderProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.OrderProductTable,
			Columns: []string{order.OrderProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OrderProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.OrderProductTable,
			Columns: []string{order.OrderProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
