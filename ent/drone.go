// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/drone"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/order"
	"github.com/google/uuid"
)

// Drone is the model entity for the Drone schema.
type Drone struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Latitude holds the value of the "latitude" field.
	Latitude *float64 `json:"latitude,omitempty"`
	// Longtitude holds the value of the "longtitude" field.
	Longtitude *float64 `json:"longtitude,omitempty"`
	// InWarehouse holds the value of the "in_warehouse" field.
	InWarehouse bool `json:"in_warehouse,omitempty"`
	// PlateNumber holds the value of the "plate_number" field.
	PlateNumber string `json:"plate_number,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DroneQuery when eager-loading is set.
	Edges DroneEdges `json:"edges"`
}

// DroneEdges holds the relations/edges for other nodes in the graph.
type DroneEdges struct {
	// CurrentOrder holds the value of the current_order edge.
	CurrentOrder *Order `json:"current_order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// CurrentOrderOrErr returns the CurrentOrder value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DroneEdges) CurrentOrderOrErr() (*Order, error) {
	if e.loadedTypes[0] {
		if e.CurrentOrder == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: order.Label}
		}
		return e.CurrentOrder, nil
	}
	return nil, &NotLoadedError{edge: "current_order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Drone) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case drone.FieldInWarehouse:
			values[i] = new(sql.NullBool)
		case drone.FieldLatitude, drone.FieldLongtitude:
			values[i] = new(sql.NullFloat64)
		case drone.FieldPlateNumber:
			values[i] = new(sql.NullString)
		case drone.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Drone", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Drone fields.
func (d *Drone) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case drone.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case drone.FieldLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude", values[i])
			} else if value.Valid {
				d.Latitude = new(float64)
				*d.Latitude = value.Float64
			}
		case drone.FieldLongtitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field longtitude", values[i])
			} else if value.Valid {
				d.Longtitude = new(float64)
				*d.Longtitude = value.Float64
			}
		case drone.FieldInWarehouse:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field in_warehouse", values[i])
			} else if value.Valid {
				d.InWarehouse = value.Bool
			}
		case drone.FieldPlateNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field plate_number", values[i])
			} else if value.Valid {
				d.PlateNumber = value.String
			}
		}
	}
	return nil
}

// QueryCurrentOrder queries the "current_order" edge of the Drone entity.
func (d *Drone) QueryCurrentOrder() *OrderQuery {
	return NewDroneClient(d.config).QueryCurrentOrder(d)
}

// Update returns a builder for updating this Drone.
// Note that you need to call Drone.Unwrap() before calling this method if this Drone
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Drone) Update() *DroneUpdateOne {
	return NewDroneClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Drone entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Drone) Unwrap() *Drone {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Drone is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Drone) String() string {
	var builder strings.Builder
	builder.WriteString("Drone(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	if v := d.Latitude; v != nil {
		builder.WriteString("latitude=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := d.Longtitude; v != nil {
		builder.WriteString("longtitude=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("in_warehouse=")
	builder.WriteString(fmt.Sprintf("%v", d.InWarehouse))
	builder.WriteString(", ")
	builder.WriteString("plate_number=")
	builder.WriteString(d.PlateNumber)
	builder.WriteByte(')')
	return builder.String()
}

// Drones is a parsable slice of Drone.
type Drones []*Drone
