// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/order"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/predicate"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/warehouse"
	"github.com/google/uuid"
)

// WarehouseUpdate is the builder for updating Warehouse entities.
type WarehouseUpdate struct {
	config
	hooks    []Hook
	mutation *WarehouseMutation
}

// Where appends a list predicates to the WarehouseUpdate builder.
func (wu *WarehouseUpdate) Where(ps ...predicate.Warehouse) *WarehouseUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetName sets the "name" field.
func (wu *WarehouseUpdate) SetName(s string) *WarehouseUpdate {
	wu.mutation.SetName(s)
	return wu
}

// SetDescription sets the "description" field.
func (wu *WarehouseUpdate) SetDescription(s string) *WarehouseUpdate {
	wu.mutation.SetDescription(s)
	return wu
}

// SetAddressLine sets the "address_line" field.
func (wu *WarehouseUpdate) SetAddressLine(s string) *WarehouseUpdate {
	wu.mutation.SetAddressLine(s)
	return wu
}

// SetLatitude sets the "latitude" field.
func (wu *WarehouseUpdate) SetLatitude(f float64) *WarehouseUpdate {
	wu.mutation.ResetLatitude()
	wu.mutation.SetLatitude(f)
	return wu
}

// AddLatitude adds f to the "latitude" field.
func (wu *WarehouseUpdate) AddLatitude(f float64) *WarehouseUpdate {
	wu.mutation.AddLatitude(f)
	return wu
}

// SetLongtitude sets the "longtitude" field.
func (wu *WarehouseUpdate) SetLongtitude(f float64) *WarehouseUpdate {
	wu.mutation.ResetLongtitude()
	wu.mutation.SetLongtitude(f)
	return wu
}

// AddLongtitude adds f to the "longtitude" field.
func (wu *WarehouseUpdate) AddLongtitude(f float64) *WarehouseUpdate {
	wu.mutation.AddLongtitude(f)
	return wu
}

// SetWarehouseOrderID sets the "warehouse_order" edge to the Order entity by ID.
func (wu *WarehouseUpdate) SetWarehouseOrderID(id uuid.UUID) *WarehouseUpdate {
	wu.mutation.SetWarehouseOrderID(id)
	return wu
}

// SetNillableWarehouseOrderID sets the "warehouse_order" edge to the Order entity by ID if the given value is not nil.
func (wu *WarehouseUpdate) SetNillableWarehouseOrderID(id *uuid.UUID) *WarehouseUpdate {
	if id != nil {
		wu = wu.SetWarehouseOrderID(*id)
	}
	return wu
}

// SetWarehouseOrder sets the "warehouse_order" edge to the Order entity.
func (wu *WarehouseUpdate) SetWarehouseOrder(o *Order) *WarehouseUpdate {
	return wu.SetWarehouseOrderID(o.ID)
}

// Mutation returns the WarehouseMutation object of the builder.
func (wu *WarehouseUpdate) Mutation() *WarehouseMutation {
	return wu.mutation
}

// ClearWarehouseOrder clears the "warehouse_order" edge to the Order entity.
func (wu *WarehouseUpdate) ClearWarehouseOrder() *WarehouseUpdate {
	wu.mutation.ClearWarehouseOrder()
	return wu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WarehouseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, WarehouseMutation](ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WarehouseUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WarehouseUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WarehouseUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wu *WarehouseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(warehouse.Table, warehouse.Columns, sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUUID))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Name(); ok {
		_spec.SetField(warehouse.FieldName, field.TypeString, value)
	}
	if value, ok := wu.mutation.Description(); ok {
		_spec.SetField(warehouse.FieldDescription, field.TypeString, value)
	}
	if value, ok := wu.mutation.AddressLine(); ok {
		_spec.SetField(warehouse.FieldAddressLine, field.TypeString, value)
	}
	if value, ok := wu.mutation.Latitude(); ok {
		_spec.SetField(warehouse.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := wu.mutation.AddedLatitude(); ok {
		_spec.AddField(warehouse.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := wu.mutation.Longtitude(); ok {
		_spec.SetField(warehouse.FieldLongtitude, field.TypeFloat64, value)
	}
	if value, ok := wu.mutation.AddedLongtitude(); ok {
		_spec.AddField(warehouse.FieldLongtitude, field.TypeFloat64, value)
	}
	if wu.mutation.WarehouseOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   warehouse.WarehouseOrderTable,
			Columns: []string{warehouse.WarehouseOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.WarehouseOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   warehouse.WarehouseOrderTable,
			Columns: []string{warehouse.WarehouseOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{warehouse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WarehouseUpdateOne is the builder for updating a single Warehouse entity.
type WarehouseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WarehouseMutation
}

// SetName sets the "name" field.
func (wuo *WarehouseUpdateOne) SetName(s string) *WarehouseUpdateOne {
	wuo.mutation.SetName(s)
	return wuo
}

// SetDescription sets the "description" field.
func (wuo *WarehouseUpdateOne) SetDescription(s string) *WarehouseUpdateOne {
	wuo.mutation.SetDescription(s)
	return wuo
}

// SetAddressLine sets the "address_line" field.
func (wuo *WarehouseUpdateOne) SetAddressLine(s string) *WarehouseUpdateOne {
	wuo.mutation.SetAddressLine(s)
	return wuo
}

// SetLatitude sets the "latitude" field.
func (wuo *WarehouseUpdateOne) SetLatitude(f float64) *WarehouseUpdateOne {
	wuo.mutation.ResetLatitude()
	wuo.mutation.SetLatitude(f)
	return wuo
}

// AddLatitude adds f to the "latitude" field.
func (wuo *WarehouseUpdateOne) AddLatitude(f float64) *WarehouseUpdateOne {
	wuo.mutation.AddLatitude(f)
	return wuo
}

// SetLongtitude sets the "longtitude" field.
func (wuo *WarehouseUpdateOne) SetLongtitude(f float64) *WarehouseUpdateOne {
	wuo.mutation.ResetLongtitude()
	wuo.mutation.SetLongtitude(f)
	return wuo
}

// AddLongtitude adds f to the "longtitude" field.
func (wuo *WarehouseUpdateOne) AddLongtitude(f float64) *WarehouseUpdateOne {
	wuo.mutation.AddLongtitude(f)
	return wuo
}

// SetWarehouseOrderID sets the "warehouse_order" edge to the Order entity by ID.
func (wuo *WarehouseUpdateOne) SetWarehouseOrderID(id uuid.UUID) *WarehouseUpdateOne {
	wuo.mutation.SetWarehouseOrderID(id)
	return wuo
}

// SetNillableWarehouseOrderID sets the "warehouse_order" edge to the Order entity by ID if the given value is not nil.
func (wuo *WarehouseUpdateOne) SetNillableWarehouseOrderID(id *uuid.UUID) *WarehouseUpdateOne {
	if id != nil {
		wuo = wuo.SetWarehouseOrderID(*id)
	}
	return wuo
}

// SetWarehouseOrder sets the "warehouse_order" edge to the Order entity.
func (wuo *WarehouseUpdateOne) SetWarehouseOrder(o *Order) *WarehouseUpdateOne {
	return wuo.SetWarehouseOrderID(o.ID)
}

// Mutation returns the WarehouseMutation object of the builder.
func (wuo *WarehouseUpdateOne) Mutation() *WarehouseMutation {
	return wuo.mutation
}

// ClearWarehouseOrder clears the "warehouse_order" edge to the Order entity.
func (wuo *WarehouseUpdateOne) ClearWarehouseOrder() *WarehouseUpdateOne {
	wuo.mutation.ClearWarehouseOrder()
	return wuo
}

// Where appends a list predicates to the WarehouseUpdate builder.
func (wuo *WarehouseUpdateOne) Where(ps ...predicate.Warehouse) *WarehouseUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WarehouseUpdateOne) Select(field string, fields ...string) *WarehouseUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Warehouse entity.
func (wuo *WarehouseUpdateOne) Save(ctx context.Context) (*Warehouse, error) {
	return withHooks[*Warehouse, WarehouseMutation](ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WarehouseUpdateOne) SaveX(ctx context.Context) *Warehouse {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WarehouseUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WarehouseUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wuo *WarehouseUpdateOne) sqlSave(ctx context.Context) (_node *Warehouse, err error) {
	_spec := sqlgraph.NewUpdateSpec(warehouse.Table, warehouse.Columns, sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUUID))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Warehouse.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, warehouse.FieldID)
		for _, f := range fields {
			if !warehouse.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != warehouse.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Name(); ok {
		_spec.SetField(warehouse.FieldName, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Description(); ok {
		_spec.SetField(warehouse.FieldDescription, field.TypeString, value)
	}
	if value, ok := wuo.mutation.AddressLine(); ok {
		_spec.SetField(warehouse.FieldAddressLine, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Latitude(); ok {
		_spec.SetField(warehouse.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := wuo.mutation.AddedLatitude(); ok {
		_spec.AddField(warehouse.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := wuo.mutation.Longtitude(); ok {
		_spec.SetField(warehouse.FieldLongtitude, field.TypeFloat64, value)
	}
	if value, ok := wuo.mutation.AddedLongtitude(); ok {
		_spec.AddField(warehouse.FieldLongtitude, field.TypeFloat64, value)
	}
	if wuo.mutation.WarehouseOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   warehouse.WarehouseOrderTable,
			Columns: []string{warehouse.WarehouseOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.WarehouseOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   warehouse.WarehouseOrderTable,
			Columns: []string{warehouse.WarehouseOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Warehouse{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{warehouse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
