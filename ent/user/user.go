// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldIsUserConfirmed holds the string denoting the is_user_confirmed field in the database.
	FieldIsUserConfirmed = "is_user_confirmed"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldAuthTokens holds the string denoting the auth_tokens field in the database.
	FieldAuthTokens = "auth_tokens"
	// EdgeAddressSlaves holds the string denoting the address_slaves edge name in mutations.
	EdgeAddressSlaves = "address_slaves"
	// Table holds the table name of the user in the database.
	Table = "users"
	// AddressSlavesTable is the table that holds the address_slaves relation/edge.
	AddressSlavesTable = "addresses"
	// AddressSlavesInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	AddressSlavesInverseTable = "addresses"
	// AddressSlavesColumn is the table column denoting the address_slaves relation/edge.
	AddressSlavesColumn = "user_address_slaves"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldEmail,
	FieldFirstName,
	FieldLastName,
	FieldIsUserConfirmed,
	FieldPassword,
	FieldAuthTokens,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/runtime"
var (
	Hooks [1]ent.Hook
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultIsUserConfirmed holds the default value on creation for the "is_user_confirmed" field.
	DefaultIsUserConfirmed bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
