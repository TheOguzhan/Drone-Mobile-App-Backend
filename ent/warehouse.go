// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/order"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/warehouse"
	"github.com/google/uuid"
)

// Warehouse is the model entity for the Warehouse schema.
type Warehouse struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// AddressLine holds the value of the "address_line" field.
	AddressLine string `json:"address_line,omitempty"`
	// Latitude holds the value of the "latitude" field.
	Latitude float64 `json:"latitude,omitempty"`
	// Longtitude holds the value of the "longtitude" field.
	Longtitude float64 `json:"longtitude,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WarehouseQuery when eager-loading is set.
	Edges WarehouseEdges `json:"edges"`
}

// WarehouseEdges holds the relations/edges for other nodes in the graph.
type WarehouseEdges struct {
	// WarehouseOrder holds the value of the warehouse_order edge.
	WarehouseOrder *Order `json:"warehouse_order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// WarehouseOrderOrErr returns the WarehouseOrder value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WarehouseEdges) WarehouseOrderOrErr() (*Order, error) {
	if e.loadedTypes[0] {
		if e.WarehouseOrder == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: order.Label}
		}
		return e.WarehouseOrder, nil
	}
	return nil, &NotLoadedError{edge: "warehouse_order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Warehouse) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case warehouse.FieldLatitude, warehouse.FieldLongtitude:
			values[i] = new(sql.NullFloat64)
		case warehouse.FieldName, warehouse.FieldDescription, warehouse.FieldAddressLine:
			values[i] = new(sql.NullString)
		case warehouse.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Warehouse", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Warehouse fields.
func (w *Warehouse) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case warehouse.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				w.ID = *value
			}
		case warehouse.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				w.Name = value.String
			}
		case warehouse.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				w.Description = value.String
			}
		case warehouse.FieldAddressLine:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address_line", values[i])
			} else if value.Valid {
				w.AddressLine = value.String
			}
		case warehouse.FieldLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude", values[i])
			} else if value.Valid {
				w.Latitude = value.Float64
			}
		case warehouse.FieldLongtitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field longtitude", values[i])
			} else if value.Valid {
				w.Longtitude = value.Float64
			}
		}
	}
	return nil
}

// QueryWarehouseOrder queries the "warehouse_order" edge of the Warehouse entity.
func (w *Warehouse) QueryWarehouseOrder() *OrderQuery {
	return NewWarehouseClient(w.config).QueryWarehouseOrder(w)
}

// Update returns a builder for updating this Warehouse.
// Note that you need to call Warehouse.Unwrap() before calling this method if this Warehouse
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Warehouse) Update() *WarehouseUpdateOne {
	return NewWarehouseClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Warehouse entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Warehouse) Unwrap() *Warehouse {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Warehouse is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Warehouse) String() string {
	var builder strings.Builder
	builder.WriteString("Warehouse(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("name=")
	builder.WriteString(w.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(w.Description)
	builder.WriteString(", ")
	builder.WriteString("address_line=")
	builder.WriteString(w.AddressLine)
	builder.WriteString(", ")
	builder.WriteString("latitude=")
	builder.WriteString(fmt.Sprintf("%v", w.Latitude))
	builder.WriteString(", ")
	builder.WriteString("longtitude=")
	builder.WriteString(fmt.Sprintf("%v", w.Longtitude))
	builder.WriteByte(')')
	return builder.String()
}

// Warehouses is a parsable slice of Warehouse.
type Warehouses []*Warehouse
