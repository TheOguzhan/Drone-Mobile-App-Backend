// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/user"
	"github.com/google/uuid"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// IsUserConfirmed holds the value of the "is_user_confirmed" field.
	IsUserConfirmed bool `json:"is_user_confirmed,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// AuthTokens holds the value of the "auth_tokens" field.
	AuthTokens []string `json:"auth_tokens,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// AddressSlaves holds the value of the address_slaves edge.
	AddressSlaves []*Address `json:"address_slaves,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedAddressSlaves map[string][]*Address
}

// AddressSlavesOrErr returns the AddressSlaves value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AddressSlavesOrErr() ([]*Address, error) {
	if e.loadedTypes[0] {
		return e.AddressSlaves, nil
	}
	return nil, &NotLoadedError{edge: "address_slaves"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldAuthTokens:
			values[i] = new([]byte)
		case user.FieldIsUserConfirmed:
			values[i] = new(sql.NullBool)
		case user.FieldUsername, user.FieldEmail, user.FieldFirstName, user.FieldLastName, user.FieldPassword:
			values[i] = new(sql.NullString)
		case user.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				u.FirstName = value.String
			}
		case user.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				u.LastName = value.String
			}
		case user.FieldIsUserConfirmed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_user_confirmed", values[i])
			} else if value.Valid {
				u.IsUserConfirmed = value.Bool
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldAuthTokens:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field auth_tokens", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &u.AuthTokens); err != nil {
					return fmt.Errorf("unmarshal field auth_tokens: %w", err)
				}
			}
		}
	}
	return nil
}

// QueryAddressSlaves queries the "address_slaves" edge of the User entity.
func (u *User) QueryAddressSlaves() *AddressQuery {
	return NewUserClient(u.config).QueryAddressSlaves(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(u.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(u.LastName)
	builder.WriteString(", ")
	builder.WriteString("is_user_confirmed=")
	builder.WriteString(fmt.Sprintf("%v", u.IsUserConfirmed))
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("auth_tokens=")
	builder.WriteString(fmt.Sprintf("%v", u.AuthTokens))
	builder.WriteByte(')')
	return builder.String()
}

// NamedAddressSlaves returns the AddressSlaves named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedAddressSlaves(name string) ([]*Address, error) {
	if u.Edges.namedAddressSlaves == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedAddressSlaves[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedAddressSlaves(name string, edges ...*Address) {
	if u.Edges.namedAddressSlaves == nil {
		u.Edges.namedAddressSlaves = make(map[string][]*Address)
	}
	if len(edges) == 0 {
		u.Edges.namedAddressSlaves[name] = []*Address{}
	} else {
		u.Edges.namedAddressSlaves[name] = append(u.Edges.namedAddressSlaves[name], edges...)
	}
}

// Users is a parsable slice of User.
type Users []*User
