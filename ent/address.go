// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/address"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/user"
	"github.com/google/uuid"
)

// Address is the model entity for the Address schema.
type Address struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// AddressLine holds the value of the "address_line" field.
	AddressLine string `json:"address_line,omitempty"`
	// Latitude holds the value of the "latitude" field.
	Latitude float64 `json:"latitude,omitempty"`
	// Longtitude holds the value of the "longtitude" field.
	Longtitude float64 `json:"longtitude,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AddressQuery when eager-loading is set.
	Edges               AddressEdges `json:"edges"`
	user_address_slaves *uuid.UUID
}

// AddressEdges holds the relations/edges for other nodes in the graph.
type AddressEdges struct {
	// AddressMaster holds the value of the address_master edge.
	AddressMaster *User `json:"address_master,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// AddressMasterOrErr returns the AddressMaster value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AddressEdges) AddressMasterOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.AddressMaster == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.AddressMaster, nil
	}
	return nil, &NotLoadedError{edge: "address_master"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Address) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case address.FieldLatitude, address.FieldLongtitude:
			values[i] = new(sql.NullFloat64)
		case address.FieldName, address.FieldAddressLine:
			values[i] = new(sql.NullString)
		case address.FieldID:
			values[i] = new(uuid.UUID)
		case address.ForeignKeys[0]: // user_address_slaves
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Address", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Address fields.
func (a *Address) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case address.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case address.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case address.FieldAddressLine:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address_line", values[i])
			} else if value.Valid {
				a.AddressLine = value.String
			}
		case address.FieldLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude", values[i])
			} else if value.Valid {
				a.Latitude = value.Float64
			}
		case address.FieldLongtitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field longtitude", values[i])
			} else if value.Valid {
				a.Longtitude = value.Float64
			}
		case address.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_address_slaves", values[i])
			} else if value.Valid {
				a.user_address_slaves = new(uuid.UUID)
				*a.user_address_slaves = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryAddressMaster queries the "address_master" edge of the Address entity.
func (a *Address) QueryAddressMaster() *UserQuery {
	return NewAddressClient(a.config).QueryAddressMaster(a)
}

// Update returns a builder for updating this Address.
// Note that you need to call Address.Unwrap() before calling this method if this Address
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Address) Update() *AddressUpdateOne {
	return NewAddressClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Address entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Address) Unwrap() *Address {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Address is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Address) String() string {
	var builder strings.Builder
	builder.WriteString("Address(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("address_line=")
	builder.WriteString(a.AddressLine)
	builder.WriteString(", ")
	builder.WriteString("latitude=")
	builder.WriteString(fmt.Sprintf("%v", a.Latitude))
	builder.WriteString(", ")
	builder.WriteString("longtitude=")
	builder.WriteString(fmt.Sprintf("%v", a.Longtitude))
	builder.WriteByte(')')
	return builder.String()
}

// Addresses is a parsable slice of Address.
type Addresses []*Address
