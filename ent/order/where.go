// Code generated by ent, DO NOT EDIT.

package order

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldID, id))
}

// QrCode applies equality check predicate on the "qr_code" field. It's identical to QrCodeEQ.
func QrCode(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldQrCode, v))
}

// DateOfTheOrder applies equality check predicate on the "date_of_the_order" field. It's identical to DateOfTheOrderEQ.
func DateOfTheOrder(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldDateOfTheOrder, v))
}

// Completed applies equality check predicate on the "completed" field. It's identical to CompletedEQ.
func Completed(v bool) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCompleted, v))
}

// QrCodeEQ applies the EQ predicate on the "qr_code" field.
func QrCodeEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldQrCode, v))
}

// QrCodeNEQ applies the NEQ predicate on the "qr_code" field.
func QrCodeNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldQrCode, v))
}

// QrCodeIn applies the In predicate on the "qr_code" field.
func QrCodeIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldQrCode, vs...))
}

// QrCodeNotIn applies the NotIn predicate on the "qr_code" field.
func QrCodeNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldQrCode, vs...))
}

// QrCodeGT applies the GT predicate on the "qr_code" field.
func QrCodeGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldQrCode, v))
}

// QrCodeGTE applies the GTE predicate on the "qr_code" field.
func QrCodeGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldQrCode, v))
}

// QrCodeLT applies the LT predicate on the "qr_code" field.
func QrCodeLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldQrCode, v))
}

// QrCodeLTE applies the LTE predicate on the "qr_code" field.
func QrCodeLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldQrCode, v))
}

// QrCodeContains applies the Contains predicate on the "qr_code" field.
func QrCodeContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldQrCode, v))
}

// QrCodeHasPrefix applies the HasPrefix predicate on the "qr_code" field.
func QrCodeHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldQrCode, v))
}

// QrCodeHasSuffix applies the HasSuffix predicate on the "qr_code" field.
func QrCodeHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldQrCode, v))
}

// QrCodeEqualFold applies the EqualFold predicate on the "qr_code" field.
func QrCodeEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldQrCode, v))
}

// QrCodeContainsFold applies the ContainsFold predicate on the "qr_code" field.
func QrCodeContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldQrCode, v))
}

// DateOfTheOrderEQ applies the EQ predicate on the "date_of_the_order" field.
func DateOfTheOrderEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldDateOfTheOrder, v))
}

// DateOfTheOrderNEQ applies the NEQ predicate on the "date_of_the_order" field.
func DateOfTheOrderNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldDateOfTheOrder, v))
}

// DateOfTheOrderIn applies the In predicate on the "date_of_the_order" field.
func DateOfTheOrderIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldDateOfTheOrder, vs...))
}

// DateOfTheOrderNotIn applies the NotIn predicate on the "date_of_the_order" field.
func DateOfTheOrderNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldDateOfTheOrder, vs...))
}

// DateOfTheOrderGT applies the GT predicate on the "date_of_the_order" field.
func DateOfTheOrderGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldDateOfTheOrder, v))
}

// DateOfTheOrderGTE applies the GTE predicate on the "date_of_the_order" field.
func DateOfTheOrderGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldDateOfTheOrder, v))
}

// DateOfTheOrderLT applies the LT predicate on the "date_of_the_order" field.
func DateOfTheOrderLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldDateOfTheOrder, v))
}

// DateOfTheOrderLTE applies the LTE predicate on the "date_of_the_order" field.
func DateOfTheOrderLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldDateOfTheOrder, v))
}

// CompletedEQ applies the EQ predicate on the "completed" field.
func CompletedEQ(v bool) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCompleted, v))
}

// CompletedNEQ applies the NEQ predicate on the "completed" field.
func CompletedNEQ(v bool) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCompleted, v))
}

// HasCarrierDrone applies the HasEdge predicate on the "carrier_drone" edge.
func HasCarrierDrone() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, CarrierDroneTable, CarrierDroneColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierDroneWith applies the HasEdge predicate on the "carrier_drone" edge with a given conditions (other predicates).
func HasCarrierDroneWith(preds ...predicate.Drone) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CarrierDroneInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, CarrierDroneTable, CarrierDroneColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserOrder applies the HasEdge predicate on the "user_order" edge.
func HasUserOrder() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserOrderTable, UserOrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserOrderWith applies the HasEdge predicate on the "user_order" edge with a given conditions (other predicates).
func HasUserOrderWith(preds ...predicate.User) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserOrderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserOrderTable, UserOrderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderWarehouse applies the HasEdge predicate on the "order_warehouse" edge.
func HasOrderWarehouse() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OrderWarehouseTable, OrderWarehouseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderWarehouseWith applies the HasEdge predicate on the "order_warehouse" edge with a given conditions (other predicates).
func HasOrderWarehouseWith(preds ...predicate.Warehouse) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderWarehouseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OrderWarehouseTable, OrderWarehouseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderAddress applies the HasEdge predicate on the "order_address" edge.
func HasOrderAddress() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OrderAddressTable, OrderAddressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderAddressWith applies the HasEdge predicate on the "order_address" edge with a given conditions (other predicates).
func HasOrderAddressWith(preds ...predicate.Address) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderAddressInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OrderAddressTable, OrderAddressColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderProduct applies the HasEdge predicate on the "order_product" edge.
func HasOrderProduct() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderProductTable, OrderProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderProductWith applies the HasEdge predicate on the "order_product" edge with a given conditions (other predicates).
func HasOrderProductWith(preds ...predicate.Product) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderProductInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderProductTable, OrderProductColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Order) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		p(s.Not())
	})
}
