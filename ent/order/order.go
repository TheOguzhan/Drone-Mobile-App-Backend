// Code generated by ent, DO NOT EDIT.

package order

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the order type in the database.
	Label = "order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldQrCode holds the string denoting the qr_code field in the database.
	FieldQrCode = "qr_code"
	// FieldDateOfTheOrder holds the string denoting the date_of_the_order field in the database.
	FieldDateOfTheOrder = "date_of_the_order"
	// FieldCompleted holds the string denoting the completed field in the database.
	FieldCompleted = "completed"
	// EdgeCarrierDrone holds the string denoting the carrier_drone edge name in mutations.
	EdgeCarrierDrone = "carrier_drone"
	// EdgeUserOrder holds the string denoting the user_order edge name in mutations.
	EdgeUserOrder = "user_order"
	// EdgeOrderWarehouse holds the string denoting the order_warehouse edge name in mutations.
	EdgeOrderWarehouse = "order_warehouse"
	// EdgeOrderAddress holds the string denoting the order_address edge name in mutations.
	EdgeOrderAddress = "order_address"
	// EdgeOrderProduct holds the string denoting the order_product edge name in mutations.
	EdgeOrderProduct = "order_product"
	// Table holds the table name of the order in the database.
	Table = "orders"
	// CarrierDroneTable is the table that holds the carrier_drone relation/edge.
	CarrierDroneTable = "orders"
	// CarrierDroneInverseTable is the table name for the Drone entity.
	// It exists in this package in order to avoid circular dependency with the "drone" package.
	CarrierDroneInverseTable = "drones"
	// CarrierDroneColumn is the table column denoting the carrier_drone relation/edge.
	CarrierDroneColumn = "drone_current_order"
	// UserOrderTable is the table that holds the user_order relation/edge.
	UserOrderTable = "orders"
	// UserOrderInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserOrderInverseTable = "users"
	// UserOrderColumn is the table column denoting the user_order relation/edge.
	UserOrderColumn = "user_user_orders"
	// OrderWarehouseTable is the table that holds the order_warehouse relation/edge.
	OrderWarehouseTable = "orders"
	// OrderWarehouseInverseTable is the table name for the Warehouse entity.
	// It exists in this package in order to avoid circular dependency with the "warehouse" package.
	OrderWarehouseInverseTable = "warehouses"
	// OrderWarehouseColumn is the table column denoting the order_warehouse relation/edge.
	OrderWarehouseColumn = "warehouse_warehouse_order"
	// OrderAddressTable is the table that holds the order_address relation/edge.
	OrderAddressTable = "orders"
	// OrderAddressInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	OrderAddressInverseTable = "addresses"
	// OrderAddressColumn is the table column denoting the order_address relation/edge.
	OrderAddressColumn = "address_address_order"
	// OrderProductTable is the table that holds the order_product relation/edge.
	OrderProductTable = "orders"
	// OrderProductInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	OrderProductInverseTable = "products"
	// OrderProductColumn is the table column denoting the order_product relation/edge.
	OrderProductColumn = "product_product_order"
)

// Columns holds all SQL columns for order fields.
var Columns = []string{
	FieldID,
	FieldQrCode,
	FieldDateOfTheOrder,
	FieldCompleted,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "orders"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"address_address_order",
	"drone_current_order",
	"product_product_order",
	"user_user_orders",
	"warehouse_warehouse_order",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultQrCode holds the default value on creation for the "qr_code" field.
	DefaultQrCode string
	// DefaultDateOfTheOrder holds the default value on creation for the "date_of_the_order" field.
	DefaultDateOfTheOrder func() time.Time
	// DefaultCompleted holds the default value on creation for the "completed" field.
	DefaultCompleted bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
