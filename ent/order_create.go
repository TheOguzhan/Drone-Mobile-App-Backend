// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/address"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/drone"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/order"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/product"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/user"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/warehouse"
	"github.com/google/uuid"
)

// OrderCreate is the builder for creating a Order entity.
type OrderCreate struct {
	config
	mutation *OrderMutation
	hooks    []Hook
}

// SetQrCode sets the "qr_code" field.
func (oc *OrderCreate) SetQrCode(s string) *OrderCreate {
	oc.mutation.SetQrCode(s)
	return oc
}

// SetNillableQrCode sets the "qr_code" field if the given value is not nil.
func (oc *OrderCreate) SetNillableQrCode(s *string) *OrderCreate {
	if s != nil {
		oc.SetQrCode(*s)
	}
	return oc
}

// SetDateOfTheOrder sets the "date_of_the_order" field.
func (oc *OrderCreate) SetDateOfTheOrder(t time.Time) *OrderCreate {
	oc.mutation.SetDateOfTheOrder(t)
	return oc
}

// SetNillableDateOfTheOrder sets the "date_of_the_order" field if the given value is not nil.
func (oc *OrderCreate) SetNillableDateOfTheOrder(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetDateOfTheOrder(*t)
	}
	return oc
}

// SetCompleted sets the "completed" field.
func (oc *OrderCreate) SetCompleted(b bool) *OrderCreate {
	oc.mutation.SetCompleted(b)
	return oc
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCompleted(b *bool) *OrderCreate {
	if b != nil {
		oc.SetCompleted(*b)
	}
	return oc
}

// SetID sets the "id" field.
func (oc *OrderCreate) SetID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetID(u)
	return oc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableID(u *uuid.UUID) *OrderCreate {
	if u != nil {
		oc.SetID(*u)
	}
	return oc
}

// SetCarrierDroneID sets the "carrier_drone" edge to the Drone entity by ID.
func (oc *OrderCreate) SetCarrierDroneID(id uuid.UUID) *OrderCreate {
	oc.mutation.SetCarrierDroneID(id)
	return oc
}

// SetCarrierDrone sets the "carrier_drone" edge to the Drone entity.
func (oc *OrderCreate) SetCarrierDrone(d *Drone) *OrderCreate {
	return oc.SetCarrierDroneID(d.ID)
}

// SetUserOrderID sets the "user_order" edge to the User entity by ID.
func (oc *OrderCreate) SetUserOrderID(id uuid.UUID) *OrderCreate {
	oc.mutation.SetUserOrderID(id)
	return oc
}

// SetUserOrder sets the "user_order" edge to the User entity.
func (oc *OrderCreate) SetUserOrder(u *User) *OrderCreate {
	return oc.SetUserOrderID(u.ID)
}

// SetOrderWarehouseID sets the "order_warehouse" edge to the Warehouse entity by ID.
func (oc *OrderCreate) SetOrderWarehouseID(id uuid.UUID) *OrderCreate {
	oc.mutation.SetOrderWarehouseID(id)
	return oc
}

// SetOrderWarehouse sets the "order_warehouse" edge to the Warehouse entity.
func (oc *OrderCreate) SetOrderWarehouse(w *Warehouse) *OrderCreate {
	return oc.SetOrderWarehouseID(w.ID)
}

// SetOrderAddressID sets the "order_address" edge to the Address entity by ID.
func (oc *OrderCreate) SetOrderAddressID(id uuid.UUID) *OrderCreate {
	oc.mutation.SetOrderAddressID(id)
	return oc
}

// SetOrderAddress sets the "order_address" edge to the Address entity.
func (oc *OrderCreate) SetOrderAddress(a *Address) *OrderCreate {
	return oc.SetOrderAddressID(a.ID)
}

// SetOrderProductID sets the "order_product" edge to the Product entity by ID.
func (oc *OrderCreate) SetOrderProductID(id uuid.UUID) *OrderCreate {
	oc.mutation.SetOrderProductID(id)
	return oc
}

// SetOrderProduct sets the "order_product" edge to the Product entity.
func (oc *OrderCreate) SetOrderProduct(p *Product) *OrderCreate {
	return oc.SetOrderProductID(p.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (oc *OrderCreate) Mutation() *OrderMutation {
	return oc.mutation
}

// Save creates the Order in the database.
func (oc *OrderCreate) Save(ctx context.Context) (*Order, error) {
	oc.defaults()
	return withHooks[*Order, OrderMutation](ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrderCreate) SaveX(ctx context.Context) *Order {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrderCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrderCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrderCreate) defaults() {
	if _, ok := oc.mutation.QrCode(); !ok {
		v := order.DefaultQrCode
		oc.mutation.SetQrCode(v)
	}
	if _, ok := oc.mutation.DateOfTheOrder(); !ok {
		v := order.DefaultDateOfTheOrder()
		oc.mutation.SetDateOfTheOrder(v)
	}
	if _, ok := oc.mutation.Completed(); !ok {
		v := order.DefaultCompleted
		oc.mutation.SetCompleted(v)
	}
	if _, ok := oc.mutation.ID(); !ok {
		v := order.DefaultID()
		oc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrderCreate) check() error {
	if _, ok := oc.mutation.QrCode(); !ok {
		return &ValidationError{Name: "qr_code", err: errors.New(`ent: missing required field "Order.qr_code"`)}
	}
	if _, ok := oc.mutation.DateOfTheOrder(); !ok {
		return &ValidationError{Name: "date_of_the_order", err: errors.New(`ent: missing required field "Order.date_of_the_order"`)}
	}
	if _, ok := oc.mutation.Completed(); !ok {
		return &ValidationError{Name: "completed", err: errors.New(`ent: missing required field "Order.completed"`)}
	}
	if _, ok := oc.mutation.CarrierDroneID(); !ok {
		return &ValidationError{Name: "carrier_drone", err: errors.New(`ent: missing required edge "Order.carrier_drone"`)}
	}
	if _, ok := oc.mutation.UserOrderID(); !ok {
		return &ValidationError{Name: "user_order", err: errors.New(`ent: missing required edge "Order.user_order"`)}
	}
	if _, ok := oc.mutation.OrderWarehouseID(); !ok {
		return &ValidationError{Name: "order_warehouse", err: errors.New(`ent: missing required edge "Order.order_warehouse"`)}
	}
	if _, ok := oc.mutation.OrderAddressID(); !ok {
		return &ValidationError{Name: "order_address", err: errors.New(`ent: missing required edge "Order.order_address"`)}
	}
	if _, ok := oc.mutation.OrderProductID(); !ok {
		return &ValidationError{Name: "order_product", err: errors.New(`ent: missing required edge "Order.order_product"`)}
	}
	return nil
}

func (oc *OrderCreate) sqlSave(ctx context.Context) (*Order, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OrderCreate) createSpec() (*Order, *sqlgraph.CreateSpec) {
	var (
		_node = &Order{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(order.Table, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUUID))
	)
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oc.mutation.QrCode(); ok {
		_spec.SetField(order.FieldQrCode, field.TypeString, value)
		_node.QrCode = value
	}
	if value, ok := oc.mutation.DateOfTheOrder(); ok {
		_spec.SetField(order.FieldDateOfTheOrder, field.TypeTime, value)
		_node.DateOfTheOrder = value
	}
	if value, ok := oc.mutation.Completed(); ok {
		_spec.SetField(order.FieldCompleted, field.TypeBool, value)
		_node.Completed = value
	}
	if nodes := oc.mutation.CarrierDroneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   order.CarrierDroneTable,
			Columns: []string{order.CarrierDroneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: drone.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.drone_current_order = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.UserOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.UserOrderTable,
			Columns: []string{order.UserOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_user_orders = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.OrderWarehouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   order.OrderWarehouseTable,
			Columns: []string{order.OrderWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: warehouse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.warehouse_warehouse_order = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.OrderAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   order.OrderAddressTable,
			Columns: []string{order.OrderAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: address.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.address_address_order = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.OrderProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.OrderProductTable,
			Columns: []string{order.OrderProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_product_order = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderCreateBulk is the builder for creating many Order entities in bulk.
type OrderCreateBulk struct {
	config
	builders []*OrderCreate
}

// Save creates the Order entities in the database.
func (ocb *OrderCreateBulk) Save(ctx context.Context) ([]*Order, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Order, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrderCreateBulk) SaveX(ctx context.Context) []*Order {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrderCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrderCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
