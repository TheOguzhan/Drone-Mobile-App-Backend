// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/drone"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/order"
	"github.com/TheOguzhan/Drone-Mobile-App-Backend/ent/predicate"
	"github.com/google/uuid"
)

// DroneUpdate is the builder for updating Drone entities.
type DroneUpdate struct {
	config
	hooks    []Hook
	mutation *DroneMutation
}

// Where appends a list predicates to the DroneUpdate builder.
func (du *DroneUpdate) Where(ps ...predicate.Drone) *DroneUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetLatitude sets the "latitude" field.
func (du *DroneUpdate) SetLatitude(f float64) *DroneUpdate {
	du.mutation.ResetLatitude()
	du.mutation.SetLatitude(f)
	return du
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (du *DroneUpdate) SetNillableLatitude(f *float64) *DroneUpdate {
	if f != nil {
		du.SetLatitude(*f)
	}
	return du
}

// AddLatitude adds f to the "latitude" field.
func (du *DroneUpdate) AddLatitude(f float64) *DroneUpdate {
	du.mutation.AddLatitude(f)
	return du
}

// ClearLatitude clears the value of the "latitude" field.
func (du *DroneUpdate) ClearLatitude() *DroneUpdate {
	du.mutation.ClearLatitude()
	return du
}

// SetLongtitude sets the "longtitude" field.
func (du *DroneUpdate) SetLongtitude(f float64) *DroneUpdate {
	du.mutation.ResetLongtitude()
	du.mutation.SetLongtitude(f)
	return du
}

// SetNillableLongtitude sets the "longtitude" field if the given value is not nil.
func (du *DroneUpdate) SetNillableLongtitude(f *float64) *DroneUpdate {
	if f != nil {
		du.SetLongtitude(*f)
	}
	return du
}

// AddLongtitude adds f to the "longtitude" field.
func (du *DroneUpdate) AddLongtitude(f float64) *DroneUpdate {
	du.mutation.AddLongtitude(f)
	return du
}

// ClearLongtitude clears the value of the "longtitude" field.
func (du *DroneUpdate) ClearLongtitude() *DroneUpdate {
	du.mutation.ClearLongtitude()
	return du
}

// SetInWarehouse sets the "in_warehouse" field.
func (du *DroneUpdate) SetInWarehouse(b bool) *DroneUpdate {
	du.mutation.SetInWarehouse(b)
	return du
}

// SetNillableInWarehouse sets the "in_warehouse" field if the given value is not nil.
func (du *DroneUpdate) SetNillableInWarehouse(b *bool) *DroneUpdate {
	if b != nil {
		du.SetInWarehouse(*b)
	}
	return du
}

// ClearInWarehouse clears the value of the "in_warehouse" field.
func (du *DroneUpdate) ClearInWarehouse() *DroneUpdate {
	du.mutation.ClearInWarehouse()
	return du
}

// SetPlateNumber sets the "plate_number" field.
func (du *DroneUpdate) SetPlateNumber(s string) *DroneUpdate {
	du.mutation.SetPlateNumber(s)
	return du
}

// SetCurrentOrderID sets the "current_order" edge to the Order entity by ID.
func (du *DroneUpdate) SetCurrentOrderID(id uuid.UUID) *DroneUpdate {
	du.mutation.SetCurrentOrderID(id)
	return du
}

// SetNillableCurrentOrderID sets the "current_order" edge to the Order entity by ID if the given value is not nil.
func (du *DroneUpdate) SetNillableCurrentOrderID(id *uuid.UUID) *DroneUpdate {
	if id != nil {
		du = du.SetCurrentOrderID(*id)
	}
	return du
}

// SetCurrentOrder sets the "current_order" edge to the Order entity.
func (du *DroneUpdate) SetCurrentOrder(o *Order) *DroneUpdate {
	return du.SetCurrentOrderID(o.ID)
}

// Mutation returns the DroneMutation object of the builder.
func (du *DroneUpdate) Mutation() *DroneMutation {
	return du.mutation
}

// ClearCurrentOrder clears the "current_order" edge to the Order entity.
func (du *DroneUpdate) ClearCurrentOrder() *DroneUpdate {
	du.mutation.ClearCurrentOrder()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DroneUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, DroneMutation](ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DroneUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DroneUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DroneUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DroneUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(drone.Table, drone.Columns, sqlgraph.NewFieldSpec(drone.FieldID, field.TypeUUID))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Latitude(); ok {
		_spec.SetField(drone.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.AddedLatitude(); ok {
		_spec.AddField(drone.FieldLatitude, field.TypeFloat64, value)
	}
	if du.mutation.LatitudeCleared() {
		_spec.ClearField(drone.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := du.mutation.Longtitude(); ok {
		_spec.SetField(drone.FieldLongtitude, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.AddedLongtitude(); ok {
		_spec.AddField(drone.FieldLongtitude, field.TypeFloat64, value)
	}
	if du.mutation.LongtitudeCleared() {
		_spec.ClearField(drone.FieldLongtitude, field.TypeFloat64)
	}
	if value, ok := du.mutation.InWarehouse(); ok {
		_spec.SetField(drone.FieldInWarehouse, field.TypeBool, value)
	}
	if du.mutation.InWarehouseCleared() {
		_spec.ClearField(drone.FieldInWarehouse, field.TypeBool)
	}
	if value, ok := du.mutation.PlateNumber(); ok {
		_spec.SetField(drone.FieldPlateNumber, field.TypeString, value)
	}
	if du.mutation.CurrentOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   drone.CurrentOrderTable,
			Columns: []string{drone.CurrentOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.CurrentOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   drone.CurrentOrderTable,
			Columns: []string{drone.CurrentOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{drone.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DroneUpdateOne is the builder for updating a single Drone entity.
type DroneUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DroneMutation
}

// SetLatitude sets the "latitude" field.
func (duo *DroneUpdateOne) SetLatitude(f float64) *DroneUpdateOne {
	duo.mutation.ResetLatitude()
	duo.mutation.SetLatitude(f)
	return duo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (duo *DroneUpdateOne) SetNillableLatitude(f *float64) *DroneUpdateOne {
	if f != nil {
		duo.SetLatitude(*f)
	}
	return duo
}

// AddLatitude adds f to the "latitude" field.
func (duo *DroneUpdateOne) AddLatitude(f float64) *DroneUpdateOne {
	duo.mutation.AddLatitude(f)
	return duo
}

// ClearLatitude clears the value of the "latitude" field.
func (duo *DroneUpdateOne) ClearLatitude() *DroneUpdateOne {
	duo.mutation.ClearLatitude()
	return duo
}

// SetLongtitude sets the "longtitude" field.
func (duo *DroneUpdateOne) SetLongtitude(f float64) *DroneUpdateOne {
	duo.mutation.ResetLongtitude()
	duo.mutation.SetLongtitude(f)
	return duo
}

// SetNillableLongtitude sets the "longtitude" field if the given value is not nil.
func (duo *DroneUpdateOne) SetNillableLongtitude(f *float64) *DroneUpdateOne {
	if f != nil {
		duo.SetLongtitude(*f)
	}
	return duo
}

// AddLongtitude adds f to the "longtitude" field.
func (duo *DroneUpdateOne) AddLongtitude(f float64) *DroneUpdateOne {
	duo.mutation.AddLongtitude(f)
	return duo
}

// ClearLongtitude clears the value of the "longtitude" field.
func (duo *DroneUpdateOne) ClearLongtitude() *DroneUpdateOne {
	duo.mutation.ClearLongtitude()
	return duo
}

// SetInWarehouse sets the "in_warehouse" field.
func (duo *DroneUpdateOne) SetInWarehouse(b bool) *DroneUpdateOne {
	duo.mutation.SetInWarehouse(b)
	return duo
}

// SetNillableInWarehouse sets the "in_warehouse" field if the given value is not nil.
func (duo *DroneUpdateOne) SetNillableInWarehouse(b *bool) *DroneUpdateOne {
	if b != nil {
		duo.SetInWarehouse(*b)
	}
	return duo
}

// ClearInWarehouse clears the value of the "in_warehouse" field.
func (duo *DroneUpdateOne) ClearInWarehouse() *DroneUpdateOne {
	duo.mutation.ClearInWarehouse()
	return duo
}

// SetPlateNumber sets the "plate_number" field.
func (duo *DroneUpdateOne) SetPlateNumber(s string) *DroneUpdateOne {
	duo.mutation.SetPlateNumber(s)
	return duo
}

// SetCurrentOrderID sets the "current_order" edge to the Order entity by ID.
func (duo *DroneUpdateOne) SetCurrentOrderID(id uuid.UUID) *DroneUpdateOne {
	duo.mutation.SetCurrentOrderID(id)
	return duo
}

// SetNillableCurrentOrderID sets the "current_order" edge to the Order entity by ID if the given value is not nil.
func (duo *DroneUpdateOne) SetNillableCurrentOrderID(id *uuid.UUID) *DroneUpdateOne {
	if id != nil {
		duo = duo.SetCurrentOrderID(*id)
	}
	return duo
}

// SetCurrentOrder sets the "current_order" edge to the Order entity.
func (duo *DroneUpdateOne) SetCurrentOrder(o *Order) *DroneUpdateOne {
	return duo.SetCurrentOrderID(o.ID)
}

// Mutation returns the DroneMutation object of the builder.
func (duo *DroneUpdateOne) Mutation() *DroneMutation {
	return duo.mutation
}

// ClearCurrentOrder clears the "current_order" edge to the Order entity.
func (duo *DroneUpdateOne) ClearCurrentOrder() *DroneUpdateOne {
	duo.mutation.ClearCurrentOrder()
	return duo
}

// Where appends a list predicates to the DroneUpdate builder.
func (duo *DroneUpdateOne) Where(ps ...predicate.Drone) *DroneUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DroneUpdateOne) Select(field string, fields ...string) *DroneUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Drone entity.
func (duo *DroneUpdateOne) Save(ctx context.Context) (*Drone, error) {
	return withHooks[*Drone, DroneMutation](ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DroneUpdateOne) SaveX(ctx context.Context) *Drone {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DroneUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DroneUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DroneUpdateOne) sqlSave(ctx context.Context) (_node *Drone, err error) {
	_spec := sqlgraph.NewUpdateSpec(drone.Table, drone.Columns, sqlgraph.NewFieldSpec(drone.FieldID, field.TypeUUID))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Drone.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, drone.FieldID)
		for _, f := range fields {
			if !drone.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != drone.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Latitude(); ok {
		_spec.SetField(drone.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.AddedLatitude(); ok {
		_spec.AddField(drone.FieldLatitude, field.TypeFloat64, value)
	}
	if duo.mutation.LatitudeCleared() {
		_spec.ClearField(drone.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := duo.mutation.Longtitude(); ok {
		_spec.SetField(drone.FieldLongtitude, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.AddedLongtitude(); ok {
		_spec.AddField(drone.FieldLongtitude, field.TypeFloat64, value)
	}
	if duo.mutation.LongtitudeCleared() {
		_spec.ClearField(drone.FieldLongtitude, field.TypeFloat64)
	}
	if value, ok := duo.mutation.InWarehouse(); ok {
		_spec.SetField(drone.FieldInWarehouse, field.TypeBool, value)
	}
	if duo.mutation.InWarehouseCleared() {
		_spec.ClearField(drone.FieldInWarehouse, field.TypeBool)
	}
	if value, ok := duo.mutation.PlateNumber(); ok {
		_spec.SetField(drone.FieldPlateNumber, field.TypeString, value)
	}
	if duo.mutation.CurrentOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   drone.CurrentOrderTable,
			Columns: []string{drone.CurrentOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.CurrentOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   drone.CurrentOrderTable,
			Columns: []string{drone.CurrentOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Drone{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{drone.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
