directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Address implements Node {
  id: ID!
  name: String!
  addressLine: String!
  latitude: Float!
  longtitude: Float!
  description: String!
  addressOwner: User!
  addressOrder: Order
}
"""
CreateAddressInput is used for create Address object.
Input was generated by ent.
"""
input CreateAddressInput {
  name: String!
  addressLine: String!
  latitude: Float!
  longtitude: Float!
  description: String!
  addressOrderID: ID
}
"""
CreateDroneInput is used for create Drone object.
Input was generated by ent.
"""
input CreateDroneInput {
  latitude: Float
  longtitude: Float
  inWarehouse: Boolean
  plateNumber: String!
  currentOrderID: ID
}
"""
CreateOrderInput is used for create Order object.
Input was generated by ent.
"""
input CreateOrderInput {
  orderWarehouseID: ID!
  orderAddressID: ID!
  orderProductID: ID!
}
"""
CreateProductInput is used for create Product object.
Input was generated by ent.
"""
input CreateProductInput {
  price: Float!
  title: String!
  description: String!
  name: String!
  fotos: [String!]
  productOrderIDs: [ID!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  username: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  userAddressIDs: [ID!]
  userOrderIDs: [ID!]
}
"""
CreateWarehouseInput is used for create Warehouse object.
Input was generated by ent.
"""
input CreateWarehouseInput {
  name: String!
  description: String!
  addressLine: String!
  latitude: Float!
  longtitude: Float!
  warehouseOrderID: ID
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Drone implements Node {
  id: ID!
  latitude: Float
  longtitude: Float
  inWarehouse: Boolean
  plateNumber: String!
  currentOrder: Order
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/TheOguzhan/Drone-Mobile-App-Backend/ent.Noder") {
  """The id of the object."""
  id: ID!
}
type Order implements Node {
  id: ID!
  qrCode: String!
  dateOfTheOrder: Time!
  completed: Boolean!
  carrierDrone: Drone!
  userOrder: User!
  orderWarehouse: Warehouse!
  orderAddress: Address!
  orderProduct: Product!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Product implements Node {
  id: ID!
  price: Float!
  title: String!
  description: String!
  name: String!
  fotos: [String!]
  productOrder: [Order!]
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  addresses: [Address!]!
  drones: [Drone!]!
  orders: [Order!]!
  products: [Product!]!
  users: [User!]!
  warehouses: [Warehouse!]!
}
"""The builtin Time type"""
scalar Time
type User implements Node {
  id: ID!
  username: String!
  email: String!
  firstName: String!
  lastName: String!
  isUserConfirmed: Boolean!
  userAddresses: [Address!]
  userOrders: [Order!]
}
type Warehouse implements Node {
  id: ID!
  name: String!
  description: String!
  addressLine: String!
  latitude: Float!
  longtitude: Float!
  warehouseOrder: Order
}
